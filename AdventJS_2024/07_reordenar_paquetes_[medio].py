"""
¬°El grinch üëπ ha pasado por el taller de Santa Claus! Y menudo desastre ha
montado. Ha cambiado el orden de algunos paquetes, por lo que los env√≠os no se
pueden realizar.

Por suerte, el elfo Pheralb ha detectado el patr√≥n que ha seguido el grinch
para desordenarlos. Nos ha escrito las reglas que debemos seguir para reordenar
los paquetes. Las instrucciones que siguen son:
- Recibir√°s un string que contiene letras y par√©ntesis.
- Cada vez que encuentres un par de par√©ntesis, debes voltear el contenido
dentro de ellos.
- Si hay par√©ntesis anidados, resuelve primero los m√°s internos.
- Devuelve el string resultante con los par√©ntesis eliminados, pero con el
contenido volteado correctamente.
"""


# ++++++++++++++++++++++++++++++ # FUNCIONES # ++++++++++++++++++++++++++++++ #
# La idea es hacer una funci√≥n recursiva. Los par√©stesis anidados se pueden ver
# como paquetes dentro de paquetes
def fix_packages_recurrencia(packages):
    # Convertir el string en una lista para manipular caracteres
    # individualmente
    packages = list(packages)

    i = 0  # Inicializar el √≠ndice para recorrer la lista
    # Ciclo para procesar cada car√°cter en la lista
    while i < len(packages):
        if packages[i] == "(":
            # Eliminar el par√©ntesis "(" del paquete actual
            packages.pop(i)
            # Procesar recursivamente el contenido despu√©s del par√©ntesis "("
            # y reemplazarlo con su versi√≥n procesada
            packages[i:] = fix_packages_recurrencia(packages[i:])
        elif packages[i] == ")":
            # Invertir los caracteres antes del par√©ntesis de cierre ")"
            packages[:i] = ''.join(reversed(packages[:i]))
            packages.pop(i)     # Eliminar el par√©ntesis de cierre ")"
            return packages
        i += 1      # Continuar al siguiente car√°cter

    return ''.join(packages)


# Usando expresiones regulares, se encuentra el inidice inicial y final, luego
# se le da vuelta al contenido. Esta soluci√≥n contempla los par√©stesis
# desbalanceados.
def fix_packages(packages):
    while "(" in packages:  # Continuar mientras haya par√©ntesis en el string
        # Encontrar el par√©ntesis m√°s interno usando rfind (√∫ltima apertura)
        start = packages.rfind("(")
        # Buscar el primer par√©ntesis de cierre despu√©s del m√°s interno
        end = packages.find(")", start)

        if end == -1:  # Si no se encuentra un par√©ntesis de cierre, omitirlo
            packages = packages[:start] + packages[start + 1:]
            continue

        # Extraer el contenido entre los par√©ntesis
        inner = packages[start + 1:end]
        # Invertir el contenido y reemplazarlo en el string original
        packages = packages[:start] + inner[::-1] + packages[end + 1:]

    # Si quedan par√©ntesis de cierre desbalanceados, eliminarlos
    packages = packages.replace(")", "")

    return packages


# +++++++++++++++++++++++++++++++++ # MAIN # ++++++++++++++++++++++++++++++++ #
def main():
    print(fix_packages('a(bc)de'))              # ‚ûû "acbde"

    print(fix_packages('a(bc(def)g)h'))         # ‚ûû "agdefcbh"

    print(fix_packages('abc(def(gh)i)jk'))      # ‚ûû "abcighfedjk"

    print(fix_packages("(abc(def(ghi)))"))      # ‚ûû "defihgcba"


if __name__ == "__main__":
    main()
