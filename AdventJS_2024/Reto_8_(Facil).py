"""
춰Es hora de seleccionar a los renos m치s r치pidos para los viajes de Santa! 游붋游꾻
Santa Claus ha organizado unas emocionantes carreras de renos para decidir
cu치les est치n en mejor forma.

Tu tarea es mostrar el progreso de cada reno en una pista de nieve en formato
isom칠trico.

La informaci칩n que recibes:
- indices: Un array de enteros que representan el progreso de cada reno en la
pista:
    - 0: El carril est치 vac칤o.
    - N칰mero positivo: La posici칩n actual del reno desde el inicio de la pista.
    - N칰mero negativo: La posici칩n actual del reno desde el final de la pista.
- length: La longitud de cada carril.

Devuelve un string que represente la pista de la carrera:
- Cada carril tiene exactamente length posiciones llenas de nieve (~).
- Cada reno se representa con la letra r.
- Los carriles est치n numerados al final con /1, /2, etc.
- La vista es isom칠trica, por lo que los carriles inferiores est치n desplazados
hacia la derecha.
"""


# ++++++++++++++++++++++++++++++ # FUNCIONES # ++++++++++++++++++++++++++++++ #
# Soluci칩n utilizando arrays
def draw_race_array(indices, length):
    # Variable que guarde el contenido de carrera
    carrera = []
    # Cantidad de participantes
    n_renos = len(indices)
    # Carril original
    carril = ['~'] * length
    # Se repite el ciclo seg칰n la cantidad de renos
    for i in range(n_renos):
        reno = indices[i]           # Posici칩n del reno
        posicion = carril[:]        # Se restaura la carretera
        if reno > 0:
            posicion[reno] = 'r'    # Se remplaza la posici칩n del reno
        elif reno < 0:
            posicion[length+reno] = 'r'
        linea = ' '*(n_renos - i - 1) + ''.join(posicion) + f' /{i+1}'
        carrera.append(linea)

    return '\n'.join(carrera)


# Soluci칩n 2 utilizando arrays -> M치s eficiente
def draw_race(indices, length):
    # Variable que guarde el contenido de carrera
    carrera = []
    # Cantidad de participantes
    n_renos = len(indices)
    # Se repite el ciclo seg칰n la cantidad de renos
    for i in range(n_renos):
        reno = indices[i]           # Posici칩n del reno
        if reno == 0:
            linea = "~" * length
        if reno != 0:
            abs_renos = reno if reno > 0 else length + reno
            linea = "~" * abs_renos + "r" + "~" * (length - abs_renos - 1)
        linea = f'{' '*(n_renos - i - 1)}{linea} /{i + 1}'
        carrera.append(linea)

    return '\n'.join(carrera)


# +++++++++++++++++++++++++++++++++ # MAIN # ++++++++++++++++++++++++++++++++ #
def main():
    print(draw_race([0, 5, -3], 10))

    print(draw_race([2, -1, 0, 5], 8))

    print(draw_race([3, 7, -2], 12))


if __name__ == "__main__":
    main()
